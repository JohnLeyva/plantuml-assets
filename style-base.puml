@startuml style-base

!$defaultColor = '#white'

' Review https://github.com/tupadr3/plantuml-icon-font-sprites

!function $remark($text,$color=red) return "<color:" + $color+ ">" + $text + "</color>"  

!function $notouch      ($type = "any") return "#lightgray"
!function $notouch_link ($type = "any") return "#gray"
!function $exiting      ($type = "any") return $existing($type)
!function $existing     ($type = "any") return "#lightgreen"  
!function $existing_link($type = "any") return "#green"  
!function $new          ($type = "any") return "#powderBlue"
!function $new_link     ($type = "any") return "#blue"  
!function $change       ($type = "any") return %lighten(Yellow,70)  

!function $change_link  ($type = "any") return "#burlywood"  
!function $remove       ($type = "any") return "#pink"  
!function $remove_link  ($type = "any") return "#red"  
!function $alt          ($type = "any") return "#plum"
!function $alt_link     ($type = "any") return "#purple"  
!function $done         ($type = "any") return "#CornflowerBlue"
!function $temporary    ($type = "any") return "#powderBlue|pink" 
!function $remove_future($type = "any") return "#lightgreen|pink"  
!function $change_future($type = "any") return "#lightgreen|yellow"  

skinparam defaultTextAlignment left
skinparam fileBackgroundColor #white
skinparam LineThickness 3
skinparam ArrowLollipopColor #blue
skinparam NoteBorderThickness 1.5
'skinparam WrapWidth 200
skinparam Nodesep 40
skinparam Ranksep 50

'C4
'!include <C4/C4_Deployment>
'!include <C4/C4_Container>
'!include <C4/C4_Container>

<style>
    Component { BackgroundColor #white }
    Boundary { BackgroundColor #white }
    Interface { BackgroundColor #white }
    Control { BackgroundColor #white }
    Entity { BackgroundColor #white }
    database { BackgroundColor #white }
    Queue { BackgroundColor #white }

    legend {
        BackgroundColor #white
        LineColor #black
        FontColor #black
    }
    .environment {
        RoundCorner 150
        Shadowing 3
    }
    .service {
        RoundCorner 50
        Shadowing 3
        :depth(3) {
            LineThickness 10
        }
    }
    .transaction {
        LineColor #orange
        'LineStyle 7
        '#line.dashed 
    }
    .done {
        LineColor $existing_link()
        LineThickness 6
        'LineStyle 6
    }
    .ready {
        LineColor $existing_link()
        LineThickness 3
        LineStyle 3
    }
    .wip {
        LineColor $change_link()
        LineThickness 3
        LineStyle 3
    }
    .temporary {
        LineColor $remove()
        LineThickness 3
        'LineStyle 6
    }
    .new {
        BackGroundColor $new()
    }
    .change {
        BackGroundColor $change()
    }
    .existing {
        BackGroundColor $existing()
    }
    .live {
        BackGroundColor $existing()
    }
    .remove {
        BackGroundColor $remove()
    }
    .alt {
        BackGroundColor $alt()
    }
    .alternative {
        BackGroundColor $alt()
    }
    .notouch {
        BackGroundColor $notouch()
    }
    .out-of-scope {
        LineColor $alt()
        LineThickness 8
        BackGroundColor $notouch()|$new()
        LineStyle 70
        DiagonalCorner 20 
    }
    .next-phase{
        LineThickness 3
        BorderThickness 10
        BackGroundColor #white|$new()
        LineStyle 70
        DiagonalCorner 20 
    }
arrow {
    LineColor #gray

    .out-of-scope {
        LineColor $alt()
        LineThickness 3
        BackGroundColor $notouch()|$new()
        LineStyle 70
        DiagonalCorner 20
    }
    .wip {
        LineColor $change_link()
        LineThickness 3
        LineStyle 3
    }
    .done {
        LineColor $existing_link()
        LineThickness 3
        LineStyle 20
    }
    .new {
        LineColor $new_link()
    }
    .change {
        LineColor $change_link()
    }
    .existing {
        LineColor $existing_link()
    }
    .live {
        LineColor $existing_link()
    }
    .remove {
        LineColor $remove_link()
    }
    .alt {
        LineColor $alt_link()
    }
    .notouch {
        LineColor $notouch_link()
    }
    .transaction {
        LineColor #orange
        LineStyle 1
        LineThickness 3
    }

    .link {
        ' LineColor $change_link()
        LineThickness 6
    }
    .link_inbound {
        LineColor #green
        LineThickness 6
    }
    .link_outbound {
        LineColor #orange
        LineThickness 6
    }
    .temporary {
        LineColor #HotPink
        LineStyle 10
    }
    .eventually {
        LineStyle 15
    }
    .thick {
        LineThickness 5
    }
    .hide {
        LineThickness 0
        LineColor #transparent
        FontColor #transparent
    }
}
usecase  {
    FontSize 30
    BackgroundColor AliceBlue
    'MaximumWidth 150
    'HorizontalAlignment center
}

component {
    MaximumWidth 50
    HorizontalAlignment center
}

boundary {
    MaximumWidth 50
    HorizontalAlignment left
}

</style>

' Icons Start

!function $switch_map($original,$input,$output,$ifValue1,$ifValue2='',$ifValue3='') 
    !if ($original != $input)
        !return $input
    !endif    
    !if ($input == $ifValue1)
        !return $output
    !endif
    !if ($input == $ifValue2)
        !return $output
    !endif
    !if ($input == $ifValue3)
        !return $output
    !endif
    !return $input
!end function

!function $icon_map($name)
    !$result = $name
    !$result = $switch_map($name, $result, 'envelope-closed', 'email', 'mail')
    !$result = $switch_map($name, $result, 'timer', 'schedule')
    !$result = $switch_map($name, $result, 'box', 'parcel')
    !return $result
!end function

!function $icon($name,$size=0,$color=0)
    !$name = $icon_map($name)
    !$result = '<&' + $name + '>'
    !if ($size)
        !$result = '<size:' + $size + '>' + $result + '</size>'
    !endif
    !if ($color)
        !$result = '<color:' + $color + '>' + $result + '</color>'
    !endif
    !return $result
!end function

' Icons End

' relations start

!unquoted procedure relation($string)
    !$comment_rel = "' " + $string
    ' comments seems to be managed by the preprocessor so it cannot be output 
    ' $comment_rel
    !$global_postponed_relations = $global_postponed_relations + %newline() + $string
!end procedure

$global_postponed_relations ?= ''
!procedure relation_flush()
    $global_postponed_relations
    !$global_postponed_relations = ''
!end procedure

' relations end

' legend Start

!unquoted procedure $componentExample($type,$description='')
        rectangle $type <<$type>> [
            $description
            ]   
!endprocedure

!procedure $legend_States_Content()
$componentExample(any)
$componentExample(new)
$componentExample(alt)
$componentExample(wip)
$componentExample(done)
$componentExample(ready)
$componentExample(live)
$componentExample(notouch)
$componentExample(change)
$componentExample(temporary)
$componentExample(remove)
any -> new <<new>>
new -> alt <<alt>>
alt -> wip <<wip>>
wip -> ready <<ready>>
ready -> done <<done>>
done -> live <<live>> 
live -> notouch <<notouch>>
notouch -> change <<change>>
change -> temporary <<temporary>> 
temporary -> remove <<remove>>
!endprocedure

!procedure $legend_Arrows_Content()
    A -> B : Information Flow 
    B =\\ C : Push Message 
    C =r(0=> D : API POST
    D <=r(0= E : API GET
    E -> F <<eventually>> : Eventually
    F -|> G : Is A
    G *- H : Composed by
!endprocedure

!procedure $legend_Content()
$legend_States_Content()
$legend_Arrows_Content()
!endprocedure

'$legend_Content()

!procedure $legend($open=0)
!if ($open==0)
legend
!endif
{{
scale 0.5
!$commonincludepath = "https://raw.githubusercontent.com/JohnLeyva/plantuml-assets/master"
!include $commonincludepath/style-base.puml
$legend_States_Content()
}}

{{
scale 0.5
!$commonincludepath = "https://raw.githubusercontent.com/JohnLeyva/plantuml-assets/master"
!include $commonincludepath/style-base.puml
$legend_Arrows_Content()
}}
More about [[https://raw.githubusercontent.com/JohnLeyva/plantuml-assets/master/style-simple.svg Conventions]]
<size:8> Plantuml %version() | %date("yyyy-MMM-dd") %filename()</size>
!if ($open==0)
end legend
!endif
!endprocedure

' General Functions

'$legend()

' Legend end

@enduml

