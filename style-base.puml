@startuml style-base

!global $gitpath ?= "https://raw.githubusercontent.com/JohnLeyva/plantuml-assets/master"
!global $commonincludepath ?= $gitpath
!global $commonincludepath ?= "\code\puml\assets"
!global $this_filename_full = $commonincludepath + '/style-base.puml'

!global $icon_Size ?= 50

!$defaultColor = '#white'
!$defaultPartSeparator = '__'
!$defaultWordSeparator = '_'

!procedure test_sequence()
    !global $diagram = 'sequence'
    box
    participant aa
    end box 
    aa --> aa
!endprocedure
'test_sequence()

!function $strReplace($str='',$find='',$replace='')
    !$tail = $str
    !$len = %strlen($find)
    !if ($len == 0)
        !return $str
    !endif
    !$res = ""
    !$pos = 0
    !while $pos >= 0
        !$pos = %strpos($tail,$find)
        !if $pos >= 0
            !$head = %substr($tail, $0, $pos)
            !$tail = %substr($tail, $pos + $len)
            !$res = $res + $head + $replace
        !endif
    !endwhile
    !return $res + $tail
!endfunction

!function $text_literal($text)
    !$special = %splitstr("~ " + %chr(34) + " < _ / *"," ")
    !foreach $item in $special
        !$text = $strReplace($text, $item ,'~' + $item)
    !endfor
    !return $text
!endfunction

!procedure $assert($expected='',$actual='',$description='')
    !global $assert_count ?= 0
    !$assert_count = $assert_count + 1
    !$assert_name = 'assert_' + $assert_count
    !if ($expected != $actual)
        !if ($diagram != 'sequence')
            !$actual_literal = $text_literal($actual)
            !$expected_literal = $text_literal($expected)
            !if ($actual_literal == $actual)
                !$actual_literal = ''
            !endif
            !if ($expected_literal == $expected)
                !$expected_literal = ''
            !endif

        rectangle #red {
            card $assert_name##_card [
                = ASSERT FAILED <:fire:> 
                $description

                |=  |= value |= len | literal |
                | actual | $actual | %strlen($actual) | $actual_literal |
                | expected | $expected | %strlen($expected) | $expected_literal |
            ]
        }
        !else if ($diagram == 'sequence')
            assert --> assert  
            note over assert #red : ASSERT FAILED \n $expected != $actual \n $description
        !endif 
    !endif
!endprocedure
$assert('aaa','aaa','description')
'$assert('aaa',%chr(34) + 'aaa' + %chr(34) ,'description')
'$assert('<color:blue>aaa bbb','<color:red>aaa __bbb__' ,'description')

!procedure $set_direction()
    !$diagram ?= 'none'
    !if ($diagram != 'sequence')
        left to right direction
    !endif
!endprocedure

!function $remark($text,$color=red) return "<color:" + $color+ ">" + $text + "</color>"

!global $stylepath = $gitpath + '/style.puml'
!include $stylepath

' aliases start

!procedure Set_Alias($alias)
    !$alias_var = "alias_map__" + $alias
    %set_variable_value($alias_var, $global_last_name)
!endprocedure

!function alias($alias)
    !$alias_var = "alias_map__" + $alias
    !if (%variable_exists($alias_var))
        !$result = %get_variable_value($alias_var)
        !return $result
    !endif
    !return $alias
!endfunction

' aliases end

' Icons Start

!function $strContains($text,$find) 
    !return %strpos($text,$find) >= 0
!endfunction
$assert(0,$strContains('abcd','z'))
$assert(1,$strContains('abcd','c'))

!function $strAppend($source,$append,$separator='')
    !if ( %strlen($source) > 0 && %strlen($append) > 0  )
        !return $source + $separator + $append
    !else
        !return $source + $append 
    !endif
!endfunction
$assert('sourceappend',$strAppend(source,append))
$assert('source append',$strAppend(source,append,' '))

!function $strPrepend($source,$prepend,$separator='')
    !if ( %strlen($source) > 0 && %strlen($prepend) > 0 )
        !return $prepend + $separator + $source
    !else
        !return $prepend + $source
    !endif
!endfunction
$assert('prependsource',$strPrepend(source,prepend))
$assert('prepend source',$strPrepend(source,prepend,' '))

!function $strHasPrefix($text,$find) 
    !if ( %strpos($text,$find) == 0 )
        !return %true()
    !endif
    !return %false()
!endfunction
$assert(1,$strHasPrefix('aaabbb','aaa'),'IsPrefix')
$assert(0,$strHasPrefix('aaabbb','ax'),'No Prefix')

!function $strHasSuffix($text,$find) 
    !$len = %strlen($find)
    !if ($len == 0)
        !return %true()
    !endif
    !$pos = %strpos($text,$find)
    !if ($pos < 0) 
        !return %false()
    !endif
    !return ( %strlen($text) - $pos ) == $len
!endfunction
$assert(1,$strHasSuffix('aaabbb','bbb'),'IsSuffix')
$assert(1,$strHasSuffix('aaabbb',''),'Empty Suffix')
$assert(1,$strHasSuffix('',''),'Empty Suffix')
$assert(0,$strHasSuffix('','bbb'),'Empty Value')
$assert(0,$strHasSuffix('aaa','cbb'),'Empty Value')
$assert(0,$strHasSuffix('aaa','cccc'),'Empty Value')

'moved to the top as assert depends on it
$assert('<a)>-<b)>-<c)>' , $strReplace('<(a)>-<(b)>-<(c)>','<(','<'))
$assert('abc' , $strReplace('  abc  ',' ',''))
$assert('abc' , $strReplace('abc','',''))


'moved to the top as assert depends on it
$assert('~<color:blue>abc',$text_literal('<color:blue>abc'), text_literal)
 
!function $strReverse($text,$map1='<{[(',$map2='>}])')
    !$pos = %strlen($text) -1
    !$result = ''
    !while $pos >= 0
        !$char = %substr($text, $pos, 1)
        !$mapPos = %strpos($map1,$char)
        !if $mapPos >= 0
            !$char = %substr($map2, $mapPos, 1)
        !else
            !$mapPos = %strpos($map2,$char)
            !if $mapPos >= 0
                !$char = %substr($map1, $mapPos, 1)
            !endif
        !endif
        !$result = $result + $char 
        !$pos = $pos - 1  
    !endwhile
    !return $result
!endfunction
$assert('fed<987654321>cba',$strReverse('abc<123456789>def'))
$assert('a-->b',$strReverse('b<--a'))

!function $strSegmentCount($str,$separator=$defaultPartSeparator)
    !if (%strlen($str) <= 0 )
        !return 0
    !endif
    !$res = $str
    !$pos = 1
    !$count = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$count = $count + 1
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !return $count
!endfunction
$assert(3,$strSegmentCount(Part1__Part2__Part3,$defaultPartSeparator))
$assert(0,$strSegmentCount('',$defaultPartSeparator))


!function $strSegmentGet($str,$separator=$defaultPartSeparator,$count=(0-1))
    !$res = $str
    !$pos = 1
    !while ($pos >= 0)&&($count!=0)
        !$count = $count - 1
        !$pos = %strpos($res,$separator)
        !if ($pos >= 0)
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !$pos = %strpos($res,$separator)
    !if ($pos >= 0)
        !$res = %substr($res,0,$pos)
    !endif
'    !$parts = %splitstr($str,$separator) ' Splits by char not by string so is not whats required
'    !foreach $item in $parts
'        !$res = $item
'    !endfor 
    !return $res
!endfunction
$assert(Part1,$strSegmentGet(Part1__Part2__Part3__Part4,'__',0))
$assert(Part4,$strSegmentGet(Part1__Part2__Part3__Part4,'__'))
$assert(Part4,$strSegmentGet('Part1++Part2+Part3+Part4','+'))
$assert('abc+def+-+hij',$strSegmentGet('https://test.net/wiki/spaces//abc+def+-+hij','/'))

!function $GetName($str)
    !$name = $strSegmentGet($str)
    !$name = $strReplace($name,$defaultWordSeparator,' ')
    !return $name
!endfunction
$assert(Part4,$GetName(Part1__Part2__Part3__Part4))

!function $trim($str)
    !$str_parts = %splitstr($str,' ')
    !foreach $item in $str_parts
        !if ($item != '')
            !return $item
        !endif
    !endfor
    !return ''
!endfunction
$assert('abc',$trim(' abc '))


!function $strContainsSegment($list,$find,$separator)
    !if ( $list == $find )
        !return %true()
    !endif
    !if ( $strContains($list,$separator + $find + $separator) )
        !return %true()
    !endif
    !if ( $strHasPrefix($list, $find + $separator) )
        !return %true()
    !endif
    !if ( $strHasSuffix($list, $separator + $find) )
        !return %true()
    !endif
    !return %false()
!endfunction
$assert(0,$strContainsSegment('a|b|c','d','|'))
$assert(1,$strContainsSegment('a','a','|'))
$assert(1,$strContainsSegment('a|b|c','a','|'),"$strContainsSegment('a|b|c','a','|')")
$assert(1,$strContainsSegment('a|b|c','b','|'))
$assert(1,$strContainsSegment('a|b|c','c','|'),"$strContainsSegment('a|b|c','c','|')")

!function $switch_map($input,$output,$ifValue1,$ifValue2='',$ifValue3='',,$ifValue4='',,$ifValue5='',,$ifValue6='') 
    !if ($input == $ifValue1)
        !return $output
    !endif
    !if ($input == $ifValue2 && $ifValue2!='')
        !return $output
    !endif
    !if ($input == $ifValue3 && $ifValue3!='')
        !return $output
    !endif
    !if ($input == $ifValue4 && $ifValue4!='')
        !return $output
    !endif
    !if ($input == $ifValue5 && $ifValue5!='')
        !return $output
    !endif
    !if ($input == $ifValue6 && $ifValue6!='')
        !return $output
    !endif
    !return $input
!end function
$assert($switch_map('a','z','a'),'z')
$assert($switch_map('c','z','a'),'c')
$assert($switch_map('b','z','a','b'),'z')

!global $highlight_start = '<('
!global $highlight_end = ')>'

!function $highlight($str,$start=$highlight_start,$end=$highlight_end,$color='red')
    !$res = $strReplace($str,$start,"<color:" + $color + ">")
    !$res = $strReplace($res,$end,"</color>")
    !return $res
!endfunction
$assert('<color:red>a</color>',$highlight('<(a)>'))
$assert('<color:red>a</color>-<color:red>b</color>-<color:red>c</color>',$highlight('<(a)>-<(b)>-<(c)>'))

!function $link($text, $url)
    !if (%substr($text,0,1) == '/')
        !$text = $strSegmentGet($url,$text)
    !endif
    !$text = $strReplace($text,'+',' ')
    !return "[[" + $url + " " + $text + "]]"
!endfunction
$assert('[[http://google.com aa - bb]]',$link('aa+-+bb','http://google.com'))

!function $entity_icon_map($name)
    !$result = ''
    !$result = $switch_map($name, $result, 'envelope-closed', 'email', 'mail')
    !return $result
!end function


!function $icon_map($value)
    !$result = $value
    !$result = $switch_map( $result, 'timer'          , 'schedule')
    !$result = $switch_map( $result, 'box'            , 'parcel')
    !$result = $switch_map( $result, 'link-intact'    , 'link')
    !$result = $switch_map( $result, 'tablet'         , 'mobile')
    !$result = $switch_map( $result, 'envelope-closed', 'email', 'mail')
    !return $result
!end function
$assert('envelope-closed', $icon_map('email'))

!function $icon($name,$size=$icon_Size,$color=0)
    !$name = $icon_map($name)
    !$result = '<&' + $name + '>'
    !if ($size)
        !$result = '<size:' + $size + '>' + $result + '</size>'
    !endif
    !if ($color)
        !$result = '<color:' + $color + '>' + $result + '</color>'
    !endif
    !return $result
!end function

!function $entity_icon_map($type)
    !$result = $type
    !$result = $switch_map( $result, 'file '          , 'file')
    !if ($result == $type)
        !return ''
    !endif
    !return $trim($result)
!end function
$assert('file',$entity_icon_map('file'))

' Icons End

' relations start

!unquoted function $rel_inv($relation)
    !$left = $strSegmentGet($relation,' ',0)
    !$rel = $strSegmentGet($relation,' ',1)
    !$right = $strSegmentGet($relation,' ',2)
    !$rel = $strReverse($rel)
    !return $right + ' ' + $rel + ' ' + $left
!endfunction
$assert('b <-- a', $rel_inv('a --> b'))

!unquoted procedure relation($string)
    !$comment_rel = "' " + $string
    ' comments seems to be managed by the preprocessor so it cannot be output 
    ' $comment_rel
    !$global_postponed_relations = $global_postponed_relations + %newline() + $string
!end procedure

!$global_postponed_relations ?= ''
!procedure relation_flush()
    $global_postponed_relations
    !$global_postponed_relations = ''
!end procedure

' relations end
@enduml