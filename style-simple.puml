@startuml style
'https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html
'allow_mixing
'skinparam monochrome true
'skinparam linetype polyline
'skinparam linetype ortho

!include <azure/AzureCommon>
!include <azure/Databases/AzureCosmosDb>
!include <azure/Databases/AzureSqlDatabase>
!include <cloudinsight/kafka>
!include <cloudinsight/java>

!startsub BASIC

!$defaultColor = '#white'
!$defaultPartSeparator = '__'
!$defaultWordSeparator = '_'
skinparam fileBackgroundColor #white
skinparam ActorBackgroundColor #white
skinparam ComponentBackgroundColor #white
skinparam UseCaseBackgroundColor #white
skinparam ArrowThickness 3
skinparam ArrowLollipopColor #blue
skinparam ArrowColor grey
skinparam legendBackgroundColor #white
skinparam NoteBorderThickness 1.5
skinparam QueueBackgroundColor #white
skinparam BoundaryBackgroundColor #white
skinparam ControlBackgroundColor #white
skinparam EntityBackgroundColor #white
skinparam InterfaceBackgroundColor #white
skinparam DatabaseBackgroundColor #white

skinparam Rectangle<<next-phase>> {
    DiagonalCorner 20 
    BorderColor #blue
    BorderThickness 0.5
    BackgroundColor #white|#cyan
    BorderStyle dashed
    '#line.dashed 
}

skinparam Nodesep 30
skinparam Ranksep 10

skinparam rectangle {
    RoundCorner 25
}

skinparam rectangle<<environment>> {
    RoundCorner 150
}

skinparam frame<<service>> {
    RoundCorner 50
    Shadowing true
}

skinparam Frame<<transaction>> {
    BorderColor #orange
}
skinparam Package<<transaction>> {
    BorderColor #orange
}



!function $remark($text,$color=red)
    !return "<color:" + $color+ ">" + $text + "</color>"  
!endfunction

!function $out_of_scope()
    !return $remark(out-of-scope)
!endfunction

!function $done($type = "any")
    !return "#CornflowerBlue"
!endfunction

!function $notouch($type = "any")
    !return "#lightgray"
!endfunction

!function $notouch_link($type = "any")
    !return "#gray"
!endfunction

!function $exiting($type = "any")
    !return "#lightgreen"
!endfunction

!function $existing($type = "any")
    !return "#lightgreen"  
!endfunction

!function $existing_link($type = "any")
    !return "#green"  
!endfunction

!function $new($type = "any")
    !return "#powderBlue"  
!endfunction

!function $new_link($type = "any")
    !return "#blue"  
!endfunction

!function $change($type = "any")
    !return "#lightyellow"  
!endfunction

!function $change_link($type = "any")
    !return "#burlywood"  
!endfunction

!function $remove($type = "any")
    !return "#pink"  
!endfunction

!function $remove_link($type = "any")
    !return "#red"  
!endfunction

!function $alt($type = "any")
    !return "#plum"  
!endfunction

!function $alt_link($type = "any")
    !return "#purple"  
!endfunction


!function $temporary($type = "any")
    !return "#powderBlue|pink" 
!endfunction

!function $remove_future($type = "any")
    !return "#lightgreen|pink"  
!endfunction

!function $change_future($type = "any")
    !return "#lightgreen|yellow"  
!endfunction

!function $strReplace($str,$find,$replace)
    !$len = %strlen($str)
    !$res = ""
    !while $len >= 0
        !$chr = %substr($str,$len,1)
        !if $chr == $find
            !$res = $replace + $res
        !else
            !$res = $chr + $res
        !endif
        !$len = $len - 1
    !endwhile
    !return $res
!endfunction

!procedure $ShowJson($json,$text='=json')
    label l [
        $text
        {{json
        $json
        }}
    ]
!endprocedure

!function $CountPart($str,$separator=$defaultPartSeparator)
    !$res = $str
    !$pos = 1
    !$count = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$count = $count + 1
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !return $count
!endfunction
!procedure $CountPart_Test()
    !$count = $CountPart(Part1__Part2__Part3,$defaultPartSeparator) 
    node CountPart_Test  
    note right
        $count
    endnote
!endprocedure
'$CountPart_Test()

!function $LastPart($str,$separator=$defaultPartSeparator)
    !$res = $str
    !$pos = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile 
'    !$parts = %splitstr($str,$separator) ' Splits by char not by string so is not whats required
'    !foreach $item in $parts
'        !$res = $item
'    $endfor 
    !return $res
!endfunction
!procedure $LastPart_Test() 
    node LastPart_Test
    note right
        $LastPart(Part1__Part2__Part3,'__')
    endnote
!endprocedure
'$LastPart_Test()

!unquoted function $label($str,$type='',$size=0, $action='')
    !$res = $str
    !if ($type!='')
        !$res = $res + ' <<' + $type + '>>'
    !endif
    !if ($size > 0)
        !$sizeStart = '<size:' + $size + '>'
        !$sizeEnd = '</size>'
    !else
        !$sizeStart = ''
        !$sizeEnd = ''
    !endif

    !$name = $LastPart($str)
    !$name = $strReplace($name,$defaultWordSeparator,' ')
    !$entityLevel = $CountPart($str)

    !$res = $res + ' as "' + $sizeStart + $name + $sizeEnd + '"'

    !if (%strlen($action) > 0)
        !$actionColor = %darken($action , ($entityLevel - 2) * 10)
        !$res = $res + " " + $actionColor + " "
    !endif

    !return $res
!endfunction

!procedure $label_Test() 
    node label_Test
    note right
        No Size
        $label(Any_Service,service)
    endnote
    note right
        Size = 10
        $label(Any_Service,service,10)
    endnote
!endprocedure
' $label_Test()

!function $service($name = 'anyService', $action = '')
    !return "frame " + $label($name,service,50, $action) 
!endfunction

!function $environment($name = 'anyEnvironment', $action = '')
    !return "rectangle " + $label($name,environment,30, $action)
!endfunction

!unquoted procedure $tag($text='',$desc='', $tagcolor='#black')
    note on link $tagcolor|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $black_tag($text='',$desc='')
    note on link #black|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $legend($text='',$desc='')
legend
<back:#black><color:#white>Text Tag</color></back> | <back:$new()>New</back> |<back:$existing()>Existing</back> |<back:$change()>Change</back> | <back:$remove()>Remove</back> |  <back:$notouch()>Existing no touch</back> | <back:$alt()>Alternative</back>
<size:8> Plantuml %version() | %date("yyyy-MMM-dd") %filename()</size>
end legend
!endprocedure

!endsub

!unquoted procedure $example_style($text='')
    left to right direction

    together {

        component anyComponent
        component new $new() 
        component existing $existing() 
        component remove $remove()
        component temporary<<temporary>> $new() 
            '$temporary() 
        component notouch $notouch() 
        component done $done()
        component change $change()
        component alternative $alt()

        new ..|> anyComponent : Realization 

        usecase anyUseCase as "use case"
        
        'together {
        actor anyActor as "user/system" 
        actor stakeholder 
        stakeholder --|> anyActor : is as
        stakeholder -- anyUseCase
        '}

        existing -[$remove_link()]-> remove
            $black_tag(remove_link)

        existing -[$notouch_link()]-> notouch
            $black_tag(no_change_link)

        existing --> change
        change -[$change_link()]-> done
            $black_tag(change_link)
        new -[$new_link()]-> done
            $black_tag(new_link)
        done --> existing 

        new -u-|> anyUseCase : Implements

    rectangle "In the scope of another workstream" <<next-phase>> {
        component remove_future $remove()
            ' $remove_future() 
        component change_future $change()
            ' $change_future()

        existing -[$existing_link()]-> remove_future
            $black_tag(existing_link)
        
        existing --> change_future

        new --> temporary
        temporary --> remove_future : $out_of_scope()
        new -[$alt_link()]-> alternative
            $tag(alt_link)
    }

        'frame $label(Any_Service,service,50) {
    $service(Any_Service, $new()) {
        $environment(Any_Service__Any_Environment, $new()) {

            node process {
                boundary anyBoundary as "Boundary"
                control anyControl as "Control / Controller"
                entity anyEntity as "Aggregate / Entity"
            }
            database anyStorage as "Durable storage"

            anyBoundary -r-> anyControl
            anyControl -r-> anyEntity 
            anyActor --> anyBoundary
            anyControl --> anyStorage : POST/PUT/GET/PATCH\nentity

            queue Topic_outbound <<outbound>> as "topic"

            queue Topic_inbound <<inbound>> as "topic"

            anyControl --\\ Topic_outbound : PUSH
            Topic_inbound --\\ anyControl : PULL
        }
    }
}

frame Transaction_Diagram_convention {

    database Transaction_resource_A 

    Package TransactionScope <<transaction>> {
        control Control_With_TransactionScope
    }

    database Transaction_resource_B

    Transaction_resource_A --> Control_With_TransactionScope
        note on link
            solid line indicates that participates in the transaction 
        endnote
    Control_With_TransactionScope ..> Transaction_resource_B
        note on link
            dotted line indicates that participates in the transaction 
        endnote
}

!endprocedure

!unquoted procedure $flow_vs_dependency()

frame flow_vs_dependency as "flow vs dependency" {
    
    control publisher_topic 
    queue topic
    control consumer_topic

    publisher_topic --> topic : Publish
    topic --> consumer_topic : Consume

    control persister_storage 
    database storage
    control querier_storage

    persister_storage --\\ storage : Store
    storage --> querier_storage : Query
}

!endprocedure

$example_style()
$flow_vs_dependency()
$legend()

@enduml


