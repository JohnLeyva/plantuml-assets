@startuml style
left to right direction

'https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html
'allow_mixing
'skinparam monochrome true
'skinparam linetype polyline
'skinparam linetype ortho

'!include <azure/AzureCommon>
'!include <azure/Databases/AzureCosmosDb>
'!include <azure/Databases/AzureSqlDatabase>
'!include <cloudinsight/kafka>
'!include <cloudinsight/mongodb>
'!include <cloudinsight/java>
'!include <cloudinsight/java>

!$commonincludepath ?= "https://raw.githubusercontent.com/JohnLeyva/plantuml-assets/master"



' C4

'!include <cloudinsight/mongodb>

!if ($C4_Include)
  !include <C4/C4_Deployment>
  !include <C4/C4_Container>
!endif

!procedure $C4_System($name,$description='')
    System($name, $GetName($name), $description)
!endprocedure

!procedure $C4_Person($name,$description='')
    Person($name, $GetName($name), $description)
!endprocedure


'!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
'!include osaPuml/Common.puml
'!include osaPuml/User/all.puml
'
'!include <office/Servers/database_server>
'!include <office/Servers/file_server>
'!include <office/Servers/application_server>
'!include <office/Concepts/service_application>
'!include <office/Concepts/firewall>

!include $commonincludepath/style-base.puml

!$kafkaControlCenterUrl = 'https://kafka/{topic}'

!global $service_textSize = 50
!global $environment_textSize = 30
!global $external_textSize = 30

!$defaultPartSeparator = '__'
!$defaultWordSeparator = '_'
!$scaleTextUp = 8
!$scaleTextDown = 4

!$scaleText = $scaleTextUp / $scaleTextDown

!procedure $rem($name)
    !$handle = '$' + $name
    !$stereotype = '<<' + $name + '>>'
    %set_variable_value($name + '_hidden', 1)
    remove $name
    remove $handle
    remove $stereotype
!endprocedure

!function $ishidden($name)
    !return %get_variable_value($name + '_hidden')
!endfunction

!procedure $hide($name)
    !$handle = '$' + $name
    !$stereotype = '<<' + $name + '>>'
    
    %set_variable_value($name + '_hidden', 1)

    'card ['$name_hidden_var' = $ishidden($name_hidden_var)]

    hide $name
    hide $handle
    hide $stereotype
    skinparam ArrowThickness<<$name>> 0
    skinparam ArrowFontSize<<$name>> 0
!endprocedure

!procedure $show($name)
    !$handle = '$' + $name
    !$stereotype = '<<' + $name + '>>'
    show $name
    show $handle
    show $stereotype
!endprocedure

!unquoted function $link_type($name)
    !return '<<' + $name + '>> : ' + "<" + $name + '>' 
!endfunction

!function $strAppend($source,$append,$separator='')
    !if ( %strlen($append) > 0 )
        !return $source + $separator + $append
    !else
        !return $source
    !endif
!endfunction

!function $strPrepend($source,$append,$separator='')
    !if ( %strlen($append) > 0 )
        !return $append + $separator + $source
    !else
        !return $source
    !endif
!endfunction

!function $strReplace($str,$find,$replace)
    !$tail = $str
    !$len = %strlen($find)
    !$res = ""
    !$pos = 0
    !while $pos >= 0
        !$pos = %strpos($tail,$find)
        !if $pos >= 0
            !$head = %substr($tail, $0, $pos)
            !$tail = %substr($tail, $pos + $len)
            !$res = $res + $head + $replace
        !endif
    !endwhile
    !return $res + $tail
!endfunction
'node strReplace_Test as "$strReplace('<(a)>-<(b)>-<(c)>','<(','<')"

!procedure $ShowJson($json,$text='=json')
    label l [
        $text
        $json
        {{json
        $json
        }}
    ]
!endprocedure

!function $CountPart($str,$separator=$defaultPartSeparator)
    !$res = $str
    !$pos = 1
    !$count = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$count = $count + 1
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !return $count
!endfunction
!procedure $CountPart_Test()
    !$count = $CountPart(Part1__Part2__Part3,$defaultPartSeparator) 
    node CountPart_Test $example
    note right
        $count
    endnote
!endprocedure
'$CountPart_Test()

!function $GetPart($str,$separator=$defaultPartSeparator,$count=(0-1))
    !$res = $str
    !$pos = 1
    !while ($pos >= 0)&&($count!=0)
        !$count = $count - 1
        !$pos = %strpos($res,$separator)
        !if ($pos >= 0)
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !$pos = %strpos($res,$separator)
    !if ($pos >= 0)
        !$res = %substr($res,0,$pos)
    !endif
'    !$parts = %splitstr($str,$separator) ' Splits by char not by string so is not whats required
'    !foreach $item in $parts
'        !$res = $item
'    !endfor 
    !return $res
!endfunction
!procedure $GetPart_Test() 
    node GetPart_Test $example
    note right
        $GetPart('Opsys_Postcode_Update ---> postcode_dat',' ',0)
        $GetPart('Opsys_Postcode_Update ---> postcode_dat',' ',1)
        $GetPart('Opsys_Postcode_Update ---> postcode_dat',' ',2)
        $GetPart(Part1__Part2__Part3__Part4,'__',0)
        $GetPart(Part1__Part2__Part3__Part4,'__')
        $GetPart('Part1++Part2+Part3+Part4','+')
        $GetPart('https://ukmail.atlassian.net/wiki/spaces/AR/pages/3691970663/Aure+Replacement+-+ConsignmentV1+-+Opsys+request+Batching','/')
    endnote
!endprocedure
'$GetPart_Test()

!function $counter_get($name='counter') return %get_variable_value('autonumber_' + $name)

!function $counter_set($name='counter',$value)
    !return %set_variable_value('autonumber_' + $name, $value)
!end function

!function $counter($name='counter',$increment=1,$seed=1)
    !$current = $counter_get($name)
    !if (%not($current))
        !$result = $seed
    !else
        !$result = $current + $increment
    !endif
    !$nop = $counter_set($name, $result)
    !return $result
!end function

!function $counter_print($name='counter',$increment=1,$seed=1)
    !return '<back:black><color:white>[' + $counter($name, $increment, $seed) + ']</color></back>' 
!end function

!function $link_id($name) 
    !return '<<thick>>' + '<<' + $name + '>>' + ' :' + $counter_print() + $GetName($name)
!end function

!function $link_entity($name) 
    %set_variable_value('entity_last', $name)
    !return %chr(34) + $name + %chr(34)
!end function

!global $highlight_start = '<('
!global $highlight_end = ')>'

!function $highlight($str,$start=$highlight_start,$end=$highlight_end,$color='red')
    !$res = $strReplace($str,$start,"<color:" + $color + ">")
    !$res = $strReplace($res,$end,"</color>")
    !return $res
!endfunction
'node highlight_test as "$highlight('<(a)>-<(b)>-<(c)>')"

!unquoted function $stereotype($str)
    !if ($str=='')
        return $str
    !endif

    !$result = ''
    !$parts = %splitstr($str,";") 
    !foreach $item in $parts
        !if (%substr($item,0,1) != "#" )
            !$result = $result + '<<' + $item + '>>'
        '!else
        '    !$actionColor = $item 
        !endif
    !endfor 
    !return $result
!endfunction
'[ <<aa>> $stereotype(one;two) <<cc>>]

!function $link($text, $url)
    !if (%substr($text,0,1) == '/')
        !$text = $GetPart($url,$text)
    !endif
    !$text = $strReplace($text,'+',' ')
    !return "[[" + $url + " " + $text + "]]"
!endfunction
!procedure $link_Test()
    card link_Test [
        $link(aa+-+bb,http://google.com)
        $link('/Aure+Replacement+',https://ukmail.atlassian.net/wiki/spaces/AR/pages/3691970663/Aure+Replacement+-+ConsignmentV1+-+Opsys+request+Batching)
    ]
!endprocedure
'$link_Test()

!function $linkRes($str)
    !$separator="|"
    !$count = $CountPart($str,$separator) -  1
    !$res = ''
    !while ($count >= 0)
        !$part = $GetPart($str,$separator,$count)
        !$key = $GetPart($part,'!',0)
        !$url = $GetPart($part,'!',1)
        !$keytag = "<" + $key + ">"
        !$res = $link($keytag, $url) + " " + $res
        !$count = $count - 1
    !endwhile 
    !return $res 
!endprocedure
!procedure $linkRes_Test()
    label linkRes [
        $linkRes('A!http://aaa.com|B!http://bbb.com|C!http://ccc.com')
    ]
!endprocedure
'$linkRes_Test()

!function $linkObj($json_object)
    !$res = ''
    !if (%get_json_type($json_object) == "object")
        !foreach $key in %get_json_keys($json_object)
            !$keytag = "<" + $key + ">"
            !$res = $res + " " + $link($keytag,$json_object[$key])
        !endfor
    !endif
    !return $res 
!endprocedure
!procedure $linkObj_Test()
    !$url_data = { 
        "A" : "http://aaa.com",
        "B" : "http://bbb.com",
        "C" : "http://ccc.com"
      }
    label linkObj [
        $linkObj($url_data)
    ]
!endprocedure
'$linkObj_Test()

!function $GetName($str)
    !$name = $GetPart($str)
    !$name = $strReplace($name,$defaultWordSeparator,' ')
    !return $name 
!endfunction

!function $label($str,$data=0,$sizeArg=0)
    !$dataname = "$" + $str + "_data"
    !$links = ''
    !if (%get_json_type($data) != "object")
        !if (%variable_exists($dataname))
            !$data = %get_variable_value($dataname)
        !endif
    !endif

    !if (%get_json_type($data) == "object")
        !$links = $linkObj($data.url)
        !if ($data.text_size > 0)
            !$sizeArg = $data.text_size
        !endif
    !endif

    !if (%get_json_type($data) == "string")
    !if (%strpos($data,"://") > 0)
        !$links = $linkRes($data.url)
        !if ($data.text_size > 0)
            !$sizeArg = $data.text_size
        !endif
    !endif
    !endif

    !$sizeArg = %intval($sizeArg)
    !$size = ( $sizeArg * $scaleTextUp / $scaleTextDown )

    !$parts = %splitstr($str,";")
    !$res = $str
    !$actionColor = ''

    !if ($size > 0)
        !$sizeStart = '<size:' + $size + '>'
        !$sizeEnd = '</size>'
    !else
        !$sizeStart = ''
        !$sizeEnd = ''
    !endif

    !$name = $GetName($str)
    !$entityLevel = $CountPart($str)

    !global $global_last_name = $str
    !global $global_last_entityLevel = $entityLevel

    !$labelAs =  $sizeStart + $name + $sizeEnd + $links
    !if (%strlen($labelAs) > 0 )
        !$res = $res + ' as "' + $labelAs + '" '
    !endif

'    !if (%strlen($actionColor) > 0)
'        !$actionColor = %darken($action , ($entityLevel - 2) * 10)
'        !$res = $res + " " + $actionColor + " "
'    !endif

    !return $res
!endfunction

!procedure $label_Test() 
    !global $Any_Service_3_data1 = { "url" : { 
        "A" : "http://aaa.com",
        "B" : "http://bbb.com",
        "C" : "http://ccc.com"
      },
      "text_size" : 40 }

    rectangle label_Test [
        == label_Test
        ---
            No Size
            $label(Any_Service_1)
        ---
            Size = 30
            $label(Any_Service_2,0,20)
        ---
            $label(Any_Service_3,$Any_Service_3_data1,15)
        ---
            $label(Any_Service_4,'F!http://aaa.com|G!http://bbb.com|H!http://ccc.com',15)
    ]
!endprocedure
'$label_Test()

!unquoted procedure $scale($type, $name, $action = '', $factor = 4)
    !$scale2 = $factor * $scaleText
    label $name [
    {{
        scale $scale2
        $type $label($name,$action,10)
    }}
    ]
!endprocedure
!procedure $scale_Test() 
    $scale(actor/,ACTOR_T,'')
!endprocedure
' $scale_Test()


!function $service($name = 'anyService', $action = '')
    !return "frame " + $label($name,$action,$service_textSize) + " <<service>> " 
!endfunction

!function $environment($name = 'anyEnvironment', $action = '')
    !return "rectangle " + $label($name, $action,$environment_textSize) + " <<environment>> "
!endfunction

!function $external($name = 'anyEnvironment', $action = '')
    !return "cloud " + $label($name,$action,$external_textSize) + " <<environment>> "
!endfunction

!function $transaction($name, $action = '') {
    !return "hexagon " + $label($name,$action) + " <<transaction>> "
!endfunction

'entity functions

!function actor        ($name,$data='') !return 'actor '       + $label($name,$data)
!function actor2       ($name,$data='') !return 'actor/ '      + $label($name,$data)
!function agent        ($name,$data='') !return 'agent '       + $label($name,$data)
!function artifact     ($name,$data='') !return 'artifact '    + $label($name,$data)
!function boundary     ($name,$data='') !return 'boundary '    + $label($name,$data)
!function card         ($name,$data='') !return 'card '        + $label($name,$data)
!function circle       ($name,$data='') !return 'circle '      + $label($name,$data)
!function cloud        ($name,$data='') !return 'cloud '       + $label($name,$data)
!function collections  ($name,$data='') !return 'collections ' + $label($name,$data)
!function component    ($name,$data='') !return 'component '   + $label($name,$data)
!function control      ($name,$data='') !return 'control '     + $label($name,$data)
!function database     ($name,$data='') !return 'database '    + $label($name,$data)
!function entity       ($name,$data='') !return 'entity '      + $label($name,$data)
!function file         ($name,$data='') !return 'file '        + $label($name,$data)
!function folder       ($name,$data='') !return 'folder '      + $label($name,$data)
!function frame        ($name,$data='') !return 'frame '       + $label($name,$data)
!function hexagon      ($name,$data='') !return 'hexagon '     + $label($name,$data)
!function interface    ($name,$data='') !return 'interface '   + $label($name,$data)
!function label        ($name,$data='') !return 'label '       + $label($name,$data)
!function node         ($name,$data='') !return 'node '        + $label($name,$data)
!function package      ($name,$data='') !return 'package '     + $label($name,$data)
!function person       ($name,$data='') !return 'person '      + $label($name,$data)
!function queue        ($name,$data='') !return 'queue '       + $label($name,$data)
!function rectangle    ($name,$data='') !return 'rectangle '   + $label($name,$data)
!function stack        ($name,$data='') !return 'stack '       + $label($name,$data)
!function storage      ($name,$data='') !return 'storage '     + $label($name,$data)
!function usecase      ($name,$data='') !return 'usecase '     + $label($name,$data)
!function usecase2     ($name,$data='') !return 'usecase/  '   + $label($name,$data)


!procedure $entity($name,$type,$size=0,$color=0)
    !$name_inner=$name + "_inner"
    rectangle $label($name) {
        label $name_inner [
            $icon($type,$size,$color)
        ]
    }
!end procedure

!procedure email($name, $size=0,$color=0)
    $entity($name, 'email', $size, $color)
!end procedure

!procedure timer($name,$size=0,$color=0)
    $entity($name, 'timer', $size, $color)
!end procedure

!procedure parcel($name,$size=100,$color="RosyBrown")
    $entity($name,parcel,$size,$color)
!end procedure

!procedure computer($name,$size=100,$color="RosyBrown")
    $entity($name,monitor,$size,$color)
!end procedure

' entities end

!function $push() return "-->"

!function $transactionLink()
    !return ' *--> "<<transaction>>"'
!endfunction

!procedure $topic($name,$format='',$icon='')
    !$topicName = $strReplace($name,'_queue','')
    !$topicName = $strReplace($name,'_topic','')
    !$topicName = $strReplace($name,'_','-')
    !$topicName = $strReplace($name,'--','_')
    !$topicUrl = $strReplace($kafkaControlCenterUrl,'{topic}',$topicName)
    !$topicLink = $link($topicName,$topicUrl)
    !$alias = $topicLink
    !$alias = $strPrepend($alias,$icon,' ')
    !$alias = $strAppend($alias,$highlight($format),'\n')
    queue $name as "$alias" 
!endprocedure

!procedure $kafka($name,$format='')
    $topic($name,$format,"<$kafka*0.5>")
!endprocedure

!procedure $topic_message($topicname,$messageType) 
    !$notename = $topicname + "_" + $messageType
    note as $notename
        %invoke_procedure($messageType)
    end note
    $topicname -- $notename
!endprocedure

!unquoted procedure $tag($text='',$desc='', $tagcolor='#black')
    note on link $tagcolor|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $black_tag($text='',$desc='')
    note on link #black|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

' Options

!unquoted procedure PK($field)
    <u>$field</u>
!endprocedure

!unquoted procedure NotUsed($field)
    <s:red>$field</s>
!endprocedure

!function $option_label($text='',$desc='')
    !$linklabel = $GetName($text)
    !return '<color:purple><size:20><&tag>' + $linklabel + '</size></color>'
!endfunction

!function $option_pro()
    !return '<color:green><size:25><&thumb-up></size></color>'
!endfunction

!function $option_con()
    !return '<color:red><size:25><&thumb-down></size></color>'
!endfunction

!function $option_link($name)
    !if ($ishidden($name) == 1)
        !return '<<alt>> <<' + $name + '>> : . '
    !endif 
    !return '<<alt>> <<' + $name + '>> : ' + $option_label($name)
!endfunction

!procedure $note_start($name='', $target='')
    !if ($target=='')
        !global $global_last_note_target = $global_last_name
    !else
        !global $global_last_note_target = $target
    !endif

    !if ($name=='')
        !$name = $global_last_name + "_note"
    !endif
    !global $global_last_note_name = $name

    !if ($name == '')
    note on link
    !else
        !$handle = '$' + $name
        !$stereotype = '<<' + $name + '>>'
    note as $name $handle $stereotype
    !endif
!endprocedure

!procedure $note_end()
    end note
    !if ($global_last_note_target != '')
        !$handle = '$' + $global_last_note_name
        !$stereotype = '<<' + $global_last_note_name + '>>'
        !if (%not($ishidden($global_last_note_name)))
            !if (%not($ishidden($global_last_note_target)))
                $global_last_note_name -- $global_last_note_target $stereotype
            !endif
        !endif
    !endif
    !global $global_last_note_name = ''
    !global $global_last_note_target = ''
!endprocedure

!procedure note($text, $name='', $target='')
    $note_start($name, $target)
    $text
    $note_end()
!endprocedure

!procedure $note_test()
    component(note_test_component)
    note(abc)
!endprocedure
'$note_test()

!procedure $option_note_start($name='', $target='')
    $note_start($name, $target)
    !$str = $strReplace($name,$defaultWordSeparator,' ')
    $option_label($str)
!endprocedure

!procedure $option_note_end()
    $note_end()
!endprocedure

!procedure $option_test()
rectangle option_test $example {
    card option_test_card [
        $option_label("Opt ABC")
        $option_pro() : option_pro
        $option_con() : option_con
    ]

    component option_test_component

    option_test_card -- option_test_component $option_link(note_opt_test)
    $option_note_start(note_opt_test, option_test_card)
        description
        ---
        $option_pro() : option_pro
        $option_con() : option_con
    $option_note_end()
}
!endprocedure
'$option_test()

' Examples

!procedure messageTypeExample ()
    {{
        json jsonschema {
            "Key" : "Header.CorrelationID",
            "Value" : {
                "EntityId" : "string",
                "status" : ["Success", "Warning", "Failed"],
                "Errors[]" : "record"
            }
        }
    }}
!end procedure


'big example

!unquoted procedure $componentExample($type,$description='')
        rectangle $type <<$type>> [
            $description
            ]   
!endprocedure

!procedure $example_style()
    rectangle example_style $example {
        together {
            component anyComponent
            $componentExample(new)
            $componentExample(existing)
            $componentExample(remove)
            component temporary <<new>> <<temporary>> 
            $componentExample(notouch) 
            $componentExample(done) 
            $componentExample(ready)
            $componentExample(wip)
            $componentExample(change)
            component alternative <<alt>>

            new ..|> anyComponent : Realization 
            usecase anyUseCase as "use case"
            actor anyActor as "user/system" 
            actor stakeholder  
            stakeholder --|> anyActor : is as
            stakeholder -- anyUseCase

            existing --> remove $link_type(remove)
            existing --> notouch $link_type(notouch)
            existing --> change $link_type(change) 
            change --> done $link_type(change)
            new --> done $link_type(new)
                $black_tag(new_link)
            wip --> done
            ready --> done
            done --> existing $link_type(existing)

            new --|> anyUseCase : Implements

            rectangle "No in the project scope" <<out-of-scope>> {
                component remove_future <<remove>>
            }
            
            rectangle "In the scope of another workstream" <<next-phase>> {
                component change_future <<change>>

                existing --> remove_future <<existing>>
                    $black_tag(existing_link)
                
                existing --> change_future $link_type(eventually)

                new --> temporary $link_type(temporary)
                temporary --> remove_future $link_type(out-of-scope)
                new --> alternative $link_type(alt)
                    $tag(alt_link)
            }
        }
  
    $service(Any_Service_Group) <<existing>> {
        $service(Any_Service) <<new>> {
            $environment(Any_Service__Any_Environment) <<new>> {

                database anyDatabase as "Queryable\nstorage"
                file anyFile as "File\nstorage"
                node process {
                    entity anyEntity as "Aggregate / Entity"
                    control anyControl as "Control / Controller"
                    boundary anyBoundary as "Boundary"
                    anyControl -l-> anyEntity
                    anyBoundary -l-> anyControl
                    anyActor --> anyBoundary
                }

                anyControl --> anyDatabase : POST/PUT/PATCH
                anyDatabase --> anyControl : GET
                anyControl --> anyFile : Save
                anyFile --> anyControl : Retrieve

                $kafka(Topic_outbound,'<(MessageType)>-from_<(source)>-processed') <<outbound>>
                $topic(Topic_inbound,'<(MessageType)>-from_<(source)>-accepted') <<inbound>>
                $topic_message(Topic_outbound,messageTypeExample)

                anyControl --\\ Topic_outbound : PUSH
                Topic_inbound --\\ anyControl : PULL

                interface ApiGateway as "ApiGateway Proxy"
                ApiGateway -d- anyBoundary
            }
        }
    } 
}
!endprocedure

!procedure $Transaction_example()
frame Transaction_Diagram_convention $example {

    database Transaction_resource_A 

    $transaction(Any_TransactionScope) {
        control $label(Control_With_TransactionScope)
    }

    database Transaction_resource_B
    File No_Transaction_resource_C

    Transaction_resource_A *--> Control_With_TransactionScope <<transaction>> : read
        note on link
            **In transaction** 
            Use Composition Arrow 
            <color:red>*--></color>
        endnote
    Control_With_TransactionScope *--> Transaction_resource_B <<transaction>> : write
        note on link
            In transaction 
        endnote
    Control_With_TransactionScope --> No_Transaction_resource_C : write
        note on link
            **NOT in transaction** 
        endnote
}
!endprocedure


!procedure $model_notation_example()
frame $label(model_notation) $example {
     label model_notation_label [
         {{
             'left to right direction
             'skinparam Nodesep 100
             skinparam Ranksep 35

             Entity "Car" as Car {}
             Class "Vehicle" as Vehicle {
                 PK(Primary Key)
                 Normal Property
             }
             enum SetOfValues {
                 PK(default)
                 Active
                 NotUsed(Not Used)
             }

             Car -|> Vehicle : Is a
             Vehicle "Composed by" *---{ "many" Part  
             Part - SetOfValues
         }} 
     ]
}
!endprocedure

!procedure $flow_vs_dependency()
frame $label(flow_vs_dependency) $example {
    
    rectangle flow_vs_dependency_A as " "  {
        control publisher_topic
        queue topic
        control consumer_topic
        publisher_topic -r-\\ topic : Publish
        topic -r-\\ consumer_topic : Consume
    }

    rectangle flow_vs_dependency_B as " " {
        control persister_storage
        database storage
        control querier_storage

        persister_storage -r-> storage : Store
        storage -r-> querier_storage : Query
    }

    rectangle flow_vs_dependency_C as " " {
        control API_client_POST
        interface API_Gateway_POST
        boundary API_Backend_POST

        API_client_POST -r(0-> API_Gateway_POST : POST
        API_Gateway_POST -r(0-> API_Backend_POST : POST
    }

    rectangle flow_vs_dependency_D as " " {
        control API_client_GET
        interface API_Gateway_GET
        boundary API_Backend_GET

        API_client_GET <-r(0- API_Gateway_GET : GET
        API_Gateway_GET <-r(0- API_Backend_GET : GET
    }

    flow_vs_dependency_A -- flow_vs_dependency_B <<hide>>
    flow_vs_dependency_B -- flow_vs_dependency_C <<hide>>
    flow_vs_dependency_C -- flow_vs_dependency_D <<hide>>
}
!endprocedure

!procedure $style_test_all()
rectangle {
 $option_test()
    $flow_vs_dependency()
    $model_notation_example()
    $Transaction_example()
}
$example_style()
$legend()
!endprocedure

'$style_test_all()

@enduml


