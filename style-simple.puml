@startuml style
'https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html
'allow_mixing
'skinparam monochrome true
'skinparam linetype polyline
'skinparam linetype ortho

!include <azure/AzureCommon>
!include <azure/Databases/AzureCosmosDb>
!include <azure/Databases/AzureSqlDatabase>
!include <cloudinsight/kafka>
!include <cloudinsight/java>

!startsub BASIC

!global $service_textSize = 50
!global $environment_textSize = 30
!global $external_textSize = 30

!$defaultColor = '#white'
!$defaultPartSeparator = '__'
!$defaultWordSeparator = '_'
!$scaleTextUp = 8
!$scaleTextDown = 4

!$scaleText = $scaleTextUp / $scaleTextDown

!function $remark($text,$color=red) return "<color:" + $color+ ">" + $text + "</color>"  
'!function $out_of_scope() return $remark(out-of-scope)

!function $notouch($type = "any") return "#lightgray"
!function $notouch_link($type = "any") return "#gray"
!function $exiting($type = "any") return $existing($type)
!function $existing($type = "any") return "#lightgreen"  
!function $existing_link($type = "any") return "#green"  
!function $new($type = "any") return "#powderBlue"
!function $new_link($type = "any") return "#blue"  
!function $change($type = "any") return %lighten(Yellow,70)  

!function $change_link($type = "any") return "#burlywood"  
!function $remove($type = "any") return "#pink"  
!function $remove_link($type = "any") return "#red"  
!function $alt($type = "any") return "#plum"
!function $alt_link($type = "any") return "#purple"  
!function $done($type = "any") return "#CornflowerBlue"
!function $temporary($type = "any") return "#powderBlue|pink" 
!function $remove_future($type = "any") return "#lightgreen|pink"  
!function $change_future($type = "any") return "#lightgreen|yellow"  

skinparam defaultTextAlignment left
skinparam fileBackgroundColor #white
skinparam ActorBackgroundColor #white
skinparam ComponentBackgroundColor #white
skinparam UseCaseBackgroundColor #white
skinparam ArrowThickness 3
skinparam ArrowLollipopColor #blue
skinparam ArrowColor grey
skinparam legendBackgroundColor #white
skinparam NoteBorderThickness 1.5
skinparam QueueBackgroundColor #white
skinparam BoundaryBackgroundColor #white
skinparam ControlBackgroundColor #white
skinparam EntityBackgroundColor #white
skinparam InterfaceBackgroundColor #white
skinparam DatabaseBackgroundColor #white
'skinparam WrapWidth 200
skinparam Nodesep 30
skinparam Ranksep 10

<style>
    .environment {
        RoundCorner 150
        Shadowing 3
    }
    .service {
        RoundCorner 50
        Shadowing 3
        :depth(3) {
            LineThickness 10
        }
    }
    .transaction {
        LineColor #orange
        'LineStyle 7
        '#line.dashed 
    }
    .done {
        LineColor $existing_link()
        LineThickness 6
        'LineStyle 6
    }
    .ready {
        LineColor $existing_link()
        LineThickness 6
        LineStyle 3
    }
    .wip {
        LineColor $change_link()
        LineThickness 6
        LineStyle 3
    }
    .temporary {
        LineColor $remove()
        LineThickness 3
        'LineStyle 6
    }
    .new {
        BackGroundColor $new()
    }
    .change {
        BackGroundColor $change()
    }
    .existing {
        BackGroundColor $existing()
    }
    .remove {
        BackGroundColor $remove()
    }
    .alt {
        BackGroundColor $alt()
    }
    .notouch {
        BackGroundColor $notouch()
    }
    .out-of-scope {
        LineColor $alt()
        LineThickness 8
        BackGroundColor $notouch()|$new()
        LineStyle 70
        DiagonalCorner 20 
    }
    .next-phase{
        LineThickness 3
        BorderThickness 10
        BackGroundColor #white|$new()
        LineStyle 70
        DiagonalCorner 20 
    }
arrow {
    .out-of-scope {
        LineColor $alt()
        LineThickness 3
        BackGroundColor $notouch()|$new()
        LineStyle 70
        DiagonalCorner 20
    }
    .done {
        LineColor $existing_link()
        LineThickness 3
        LineStyle 20
        ArrowThickness 20
    }
    .new {
        LineColor $new_link()
    }
    .change {
        LineColor $change_link()
    }
    .existing {
        LineColor $existing_link()
    }
    .remove {
        LineColor $remove_link()
    }
    .alt {
        LineColor $alt_link()
    }
    .notouch {
        LineColor $notouch_link()
    }
    .transaction {
        LineColor #orange
        LineStyle 1
        LineThickness 3
    }

    .link {
        ' LineColor $change_link()
        LineThickness 6
        'LineStyle 3
        'ArrowThickness 100
    }
    .link_inbound {
        LineColor #green
        LineThickness 6
        'LineStyle 3
        'ArrowThickness 100
    }
    .link_outbound {
        LineColor #orange
        LineThickness 6
        'LineStyle 3
        'ArrowThickness 100
    }
}
usecase {
    FontSize 30
    BackgroundColor AliceBlue
}

</style>

!procedure $hide($name)
    remove '$' + $name
    remove '<<' + $name + '>>'
!endprocedure

!unquoted function $link_type($name)
    !return '<<' + $name + '>> : ' + "<" + $name + '>' 
!endfunction

!function $strReplace($str,$find,$replace)
    !$tail = $str
    !$len = %strlen($find)
    !$res = ""
    !$pos = 0
    !while $pos >= 0
        !$pos = %strpos($tail,$find)
        !if $pos >= 0
            !$head = %substr($tail, $0, $pos)
            !$tail = %substr($tail, $pos + $len)
            !$res = $res + $head + $replace
        !endif
    !endwhile
    !return $res + $tail
!endfunction
'node strReplace_Test as "$strReplace('{{a}}-{{b}}-{{c}}','{{','<')"

!function $option_label($text='',$desc='')
    !return '<color:purple><size:20><&tag>' + $text + '</size></color>'
!endfunction

!function $option_pro() {
    !return '<color:green><size:25><&thumb-up></size></color>'
!endfunction

!function $option_con() {
    !return '<color:red><size:25><&thumb-down></size></color>'
!endfunction

!procedure $option_note_start($name='', $target='')
    !$str = $strReplace($name,$defaultWordSeparator,' ')
    !global $global_last_note_name = $name
    !global $global_last_note_target = $target
    !if ($name == '')
    note on link
    !else
    !$handle = '$' + $name 
    note as $name $handle 
    !endif
        $option_label($str)
!endprocedure

!procedure $option_note_end()
    end note
    !if ($global_last_note_target != '')
        $global_last_note_name -- $global_last_note_target
    !endif
    !global $global_last_note_name = ''
    !global $global_last_note_target = ''
!endprocedure

rectangle option_test $example {
    card option_test_card [
        $option_label("Opt ABC")
        $option_pro() : option_pro 
        $option_con() : option_con 
    ]

    $option_note_start(note_opt_test, 'option_test_card')
        description
        ---
        $option_pro() : option_pro 
        $option_con() : option_con 
    $option_note_end()
}

!procedure $ShowJson($json,$text='=json')
    label l [
        $text
        $json
        {{json
        $json
        }}
    ]
!endprocedure

!function $CountPart($str,$separator=$defaultPartSeparator)
    !$res = $str
    !$pos = 1
    !$count = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$count = $count + 1
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !return $count
!endfunction
!procedure $CountPart_Test()
    !$count = $CountPart(Part1__Part2__Part3,$defaultPartSeparator) 
    node CountPart_Test $example
    note right
        $count
    endnote
!endprocedure
'$CountPart_Test()

!function $GetPart($str,$separator=$defaultPartSeparator,$count=(0-1))
    !$res = $str
    !$pos = 1
    !while ($pos >= 0)&&($count!=0)
        !$count = $count - 1
        !$pos = %strpos($res,$separator)
        !if ($pos >= 0)
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !$pos = %strpos($res,$separator)
    !if ($pos >= 0)
        !$res = %substr($res,0,$pos)
    !endif
'    !$parts = %splitstr($str,$separator) ' Splits by char not by string so is not whats required
'    !foreach $item in $parts
'        !$res = $item
'    !endfor 
    !return $res
!endfunction
!procedure $GetPart_Test() 
    node GetPart_Test $example
    note right
        $GetPart(Part1__Part2__Part3__Part4,'__',0)
        $GetPart(Part1__Part2__Part3__Part4,'__')
        $GetPart('Part1++Part2+Part3+Part4','+')
        $GetPart('https://ukmail.atlassian.net/wiki/spaces/AR/pages/3691970663/Aure+Replacement+-+ConsignmentV1+-+Opsys+request+Batching','/')
    endnote
!endprocedure
'$GetPart_Test()

!function $highlight($str,$start='{{',$end='}}',$color='red')
    !$res = $strReplace($str,$start,"<color:red>")
    !$res = $strReplace($res,$end,"</color>")
    !return $res
!endfunction
'node highlight_test as "$highlight('{{a}}-{{b}}-{{c}}')"

!unquoted function $stereotype($str)
    !if ($str=='')
        return $str
    !endif

    !$result = ''
    !$parts = %splitstr($str,";") 
    !foreach $item in $parts
        !if (%substr($item,0,1) != "#" )
            !$result = $result + '<<' + $item + '>>'
        '!else
        '    !$actionColor = $item 
        !endif
    !endfor 
    !return $result
!endfunction
'[ <<aa>> $stereotype(one;two) <<cc>>]

!function $link($text, $url)
    !if (%substr($text,0,1) == '/')
        !$text = $GetPart($url,$text)
    !endif
    !$text = $strReplace($text,'+',' ')
    !return "[[" + $url + " " + $text + "]]"
!endfunction
!procedure $link_Test()
    card link_Test [
        $link(aa+-+bb,http://google.com)
        $link('/Aure+Replacement+',https://ukmail.atlassian.net/wiki/spaces/AR/pages/3691970663/Aure+Replacement+-+ConsignmentV1+-+Opsys+request+Batching)
    ]
!endprocedure
'$link_Test()

!function $linkRes($str)
    !$separator="|"
    !$count = $CountPart($str,$separator) -  1
    !$res = ''
    !while ($count >= 0)
        !$part = $GetPart($str,$separator,$count)
        !$key = $GetPart($part,'!',0)
        !$url = $GetPart($part,'!',1)
        !$keytag = "<" + $key + ">"
        !$res = $link($keytag, $url) + " " + $res
        !$count = $count - 1
    !endwhile 
    !return $res 
!endprocedure
!procedure $linkRes_Test()
    label linkRes [
        $linkRes('A!http://aaa.com|B!http://bbb.com|C!http://ccc.com')
    ]
!endprocedure
'$linkRes_Test()

!function $linkObj($json_object)
    !$res = ''
    !if (%get_json_type($json_object) == "object")
        !foreach $key in %get_json_keys($json_object)
            !$keytag = "<" + $key + ">"
            !$res = $res + " " + $link($keytag,$json_object[$key])
        !endfor
    !endif
    !return $res 
!endprocedure
!procedure $linkObj_Test()
    !$url_data = { 
        "A" : "http://aaa.com",
        "B" : "http://bbb.com",
        "C" : "http://ccc.com"
      }
    label linkObj [
        $linkObj($url_data)
    ]
!endprocedure
'$linkObj_Test()

!function $label($str,$data=0,$sizeArg=0)
    !$dataname = "$" + $str + "_data"
    !$links = ''
    !if (%get_json_type($data) != "object")
        !if (%variable_exists($dataname))
            !$data = %get_variable_value($dataname)
        !endif
    !endif

    !if (%get_json_type($data) == "object")
        !$links = $linkObj($data.url)
        !if ($data.text_size > 0)
            !$sizeArg = $data.text_size
        !endif
    !endif

    !if (%get_json_type($data) == "string")
    !if (%strpos($data,"://") > 0)
        !$links = $linkRes($data.url)
        !if ($data.text_size > 0)
            !$sizeArg = $data.text_size
        !endif
    !endif
    !endif

    !$sizeArg = %intval($sizeArg)
    !$size = ( $sizeArg * $scaleTextUp / $scaleTextDown )

    !$parts = %splitstr($str,";")
    !$res = $str
    !$actionColor = ''

    !if ($size > 0)
        !$sizeStart = '<size:' + $size + '>'
        !$sizeEnd = '</size>'
    !else
        !$sizeStart = ''
        !$sizeEnd = ''
    !endif

    !$name = $GetPart($str)
    !$name = $strReplace($name,$defaultWordSeparator,' ')
    !$entityLevel = $CountPart($str)

    !global $global_last_name = $name
    !global $global_last_entityLevel = $entityLevel

    !$res = $res + ' as "' + $sizeStart + $name + $sizeEnd + $links + '" '

'    !if (%strlen($actionColor) > 0)
'        !$actionColor = %darken($action , ($entityLevel - 2) * 10)
'        !$res = $res + " " + $actionColor + " "
'    !endif

    !return $res
!endfunction


!unquoted function $labelOld($str,$data=0,$sizeArg = 0)
    !return $labelExtra($str,$data,$sizeArg)
!endfunction

!procedure $label_Test() 
    !global $Any_Service_3_data1 = { "url" : { 
        "A" : "http://aaa.com",
        "B" : "http://bbb.com",
        "C" : "http://ccc.com"
      },
      "text_size" : 40 }

    rectangle label_Test [
        == label_Test
        ---
            No Size
            $label(Any_Service_1)
        ---
            Size = 30
            $label(Any_Service_2,0,20)
        ---
            $label(Any_Service_3,$Any_Service_3_data1,15)
        ---
            $label(Any_Service_4,'F!http://aaa.com|G!http://bbb.com|H!http://ccc.com',15)
    ]
!endprocedure
'$label_Test()

!unquoted procedure $scale($type, $name, $action = '', $factor = 4)
    !$scale2 = $factor * $scaleText
    label $name [
    {{
        scale $scale2
        $type $label($name,$action,10)
    }}
    ]
!endprocedure
!procedure $scale_Test() 
    $scale(actor/,ACTOR_T,'')
!endprocedure
' $scale_Test()


!function $service($name = 'anyService', $action = '')
    !return "frame " + $label($name,$action,$service_textSize) + " <<service>> " 
!endfunction

!function $environment($name = 'anyEnvironment', $action = '')
    !return "rectangle " + $label($name, $action,$environment_textSize) + " <<environment>> "
!endfunction

!function $external($name = 'anyEnvironment', $action = '')
    !return "cloud " + $label($name,$action,$external_textSize) + " <<environment>> "
!endfunction

!function $transaction($name, $action = '') {
    !return "hexagon " + $label($name,$action) + " <<transaction>> "
!endfunction

!function $push() return "-->"

!function $transactionLink()
    !return ' *--> "<<transaction>>"'
!endfunction

!$kafkaControlCenterUrl = 'https://kafka/{topic}'

!procedure $topic($name,$format='')
    !$topicName = $strReplace($name,'_queue','')
    !$topicName = $strReplace($name,'_topic','')
    !$topicName = $strReplace($name,'_','-')
    !$topicName = $strReplace($name,'--','_')
    !$topicUrl = $strReplace($kafkaControlCenterUrl,'{topic}',$topicName)
    queue $name as "[[$topicUrl{$name} $topicName]]\n$highlight($format)"
!endprocedure

!procedure $topic_message($topicname,$messageType) 
    !$notename = $topicname + "_" + $messageType
    note as $notename
        %invoke_procedure($messageType)
    end note
    $topicname -- $notename
!endprocedure

!unquoted procedure $tag($text='',$desc='', $tagcolor='#black')
    note on link $tagcolor|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $black_tag($text='',$desc='')
    note on link #black|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $legend($text='',$desc='')
legend
<back:#black><color:#white>Text Tag</color></back> | <back:$new()>New</back> |<back:$existing()>Existing</back> |<back:$change()>Change</back> | <back:$remove()>Remove</back> |  <back:$notouch()>Existing no touch</back> | <back:$alt()>Alternative</back>
<size:8> Plantuml %version() | %date("yyyy-MMM-dd") %filename()</size>
end legend
!endprocedure

!endsub

!unquoted procedure $componentExample($type)
        component $type <<$type>> [
            ]   
!endprocedure

!procedure messageTypeExample ()
    {{
        json jsonschema {
            "Key" : "Header.CorrelationID",
            "Value" : {
                "EntityId" : "string",
                "status" : ["Success", "Warning", "Failed"],
                "Errors[]" : "record"
            }
        }
    }}
!end procedure

!unquoted procedure $example_style($text='')
    left to right direction

    together example_style $example {
        together {
            component anyComponent
            $componentExample(new)
            $componentExample(existing)
            $componentExample(remove)
            component temporary <<new>> <<temporary>> 
            $componentExample(notouch) 
            $componentExample(done) 
            $componentExample(ready)
            $componentExample(wip)
            $componentExample(change)
            component alternative <<alt>>

            new ..|> anyComponent : Realization 
            usecase anyUseCase as "use case"
            actor anyActor as "user/system" 
            actor stakeholder  
            stakeholder --|> anyActor : is as
            stakeholder -- anyUseCase

            existing --> remove $link_type(remove)
            existing --> notouch $link_type(notouch)
            existing --> change $link_type(change) 
            change --> done $link_type(change)
            new --> done $link_type(new)
                $black_tag(new_link)
            wip --> done
            ready --> done
            done --> existing $link_type(existing)

            new --|> anyUseCase : Implements

            rectangle "No in the project scope" <<out-of-scope>> {
                component remove_future <<remove>>
            }
            
            rectangle "In the scope of another workstream" <<next-phase>> {
                component change_future <<change>>

                existing --> remove_future <<existing>>
                    $black_tag(existing_link)
                
                existing --> change_future

                new --> temporary
                temporary --> remove_future $link_type(out-of-scope)
                new --> alternative $link_type(alt)
                    $tag(alt_link)
            }
        }

    $service(Any_Service_Group) <<existing>> {
        $service(Any_Service) <<new>> {
            $environment(Any_Service__Any_Environment) <<new>> {

                database anyDatabase as "Queryable\nstorage"
                file anyFile as "File\nstorage"
                node process {
                    entity anyEntity as "Aggregate / Entity"
                    control anyControl as "Control / Controller"
                    boundary anyBoundary as "Boundary"
                    anyControl -l-> anyEntity
                    anyBoundary -l-> anyControl
                    anyActor --> anyBoundary
                }

                anyControl --> anyDatabase : POST/PUT/PATCH
                anyDatabase --> anyControl : GET
                anyControl --> anyFile : Save
                anyFile --> anyControl : Retrieve

                $topic(Topic_outbound,'{{MessageType}}-from_{{source}}-processed') <<outbound>>
                $topic(Topic_inbound,'{{MessageType}}-from_{{source}}-accepted') <<inbound>>
                $topic_message(Topic_outbound,messageTypeExample)

                anyControl --\\ Topic_outbound : PUSH
                Topic_inbound --\\ anyControl : PULL

                interface ApiGateway as "ApiGateway Proxy"
                ApiGateway -d- anyBoundary
            }
        }
    } 
}


frame Transaction_Diagram_convention $example {

    database Transaction_resource_A 

    $transaction(Any_TransactionScope) {
        control $label(Control_With_TransactionScope)
    }

    database Transaction_resource_B
    File No_Transaction_resource_C

    Transaction_resource_A *--> Control_With_TransactionScope <<transaction>> : read
        note on link
            **In transaction** 
            Use Composition Arrow 
            <color:red>*--></color>
        endnote
    Control_With_TransactionScope *--> Transaction_resource_B <<transaction>> : write
        note on link
            In transaction 
        endnote
    Control_With_TransactionScope --> No_Transaction_resource_C : write
        note on link
            **NOT in transaction** 
        endnote
}

!endprocedure

!unquoted procedure PK($field)
    <u>$field</u>
!endprocedure

!unquoted procedure NotUsed($field)
    <s:red>$field</s>
!endprocedure

!unquoted procedure $model_notation_example()
frame model_notation $example {
    label model_notation_label [
        {{
            left to right direction
            skinparam Nodesep 50
            skinparam Ranksep 50

            Entity "Customer Concept" as Costumer_Concept {}
            Class "System specific Concept" as Sys_Concept {
                PK(Primary Key)
                Normal Property
            }
            enum SetOfValues {
                PK(default)
                Active
                NotUsed(Not Used)
            }

            Costumer_Concept --|> Sys_Concept : Is a
            Sys_Concept "Composed by" *---{ "many" Part  
            Part -- SetOfValues
        }}
    ]
}
!endprocedure

!unquoted procedure $flow_vs_dependency()
frame flow_vs_dependency as "flow vs dependency" $example {
    
    control publisher_topic 

    queue topic
    control consumer_topic

    publisher_topic --> topic : Publish
    topic --> consumer_topic : Consume

    control persister_storage 
    database storage
    control querier_storage

    persister_storage --\\ storage : Store
    storage --> querier_storage : Query
}
!endprocedure

$example_style()
$flow_vs_dependency()
$model_notation_example()
$legend()
@enduml


