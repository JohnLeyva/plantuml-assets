@startuml style
'https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html
'allow_mixing
'skinparam monochrome true
'skinparam linetype polyline
'skinparam linetype ortho

!include <azure/AzureCommon>
!include <azure/Databases/AzureCosmosDb>
!include <azure/Databases/AzureSqlDatabase>
!include <cloudinsight/kafka>
!include <cloudinsight/java>

!startsub BASIC

!$defaultColor = '#white'
!$defaultPartSeparator = '__'
!$defaultWordSeparator = '_'
!$scaleTextUp = 8
!$scaleTextDown = 4

!$scaleText = $scaleTextUp / $scaleTextDown

!function $remark($text,$color=red) return "<color:" + $color+ ">" + $text + "</color>"  
!function $out_of_scope() return $remark(out-of-scope)

!function $notouch($type = "any") return "#lightgray"
!function $notouch_link($type = "any") return "#gray"
!function $exiting($type = "any") return $existing($type)
!function $existing($type = "any") return "#lightgreen"  
!function $existing_link($type = "any") return "#green"  
!function $new($type = "any") return "#powderBlue"
!function $new_link($type = "any") return "#blue"  
!function $change($type = "any") return %lighten(Yellow,70)  

!function $change_link($type = "any") return "#burlywood"  
!function $remove($type = "any") return "#pink"  
!function $remove_link($type = "any") return "#red"  
!function $alt($type = "any") return "#plum"
!function $alt_link($type = "any") return "#purple"  
!function $done($type = "any") return "#CornflowerBlue"
!function $temporary($type = "any") return "#powderBlue|pink" 
!function $remove_future($type = "any") return "#lightgreen|pink"  
!function $change_future($type = "any") return "#lightgreen|yellow"  

skinparam fileBackgroundColor #white
skinparam ActorBackgroundColor #white
skinparam ComponentBackgroundColor #white
skinparam UseCaseBackgroundColor #white
skinparam ArrowThickness 3
skinparam ArrowLollipopColor #blue
skinparam ArrowColor grey
skinparam legendBackgroundColor #white
skinparam NoteBorderThickness 1.5
skinparam QueueBackgroundColor #white
skinparam BoundaryBackgroundColor #white
skinparam ControlBackgroundColor #white
skinparam EntityBackgroundColor #white
skinparam InterfaceBackgroundColor #white
skinparam DatabaseBackgroundColor #white
'skinparam WrapWidth 200
skinparam Nodesep 30
skinparam Ranksep 10

<style>
    .environment {
        RoundCorner 150
        Shadowing 3
    }
    .service {
        RoundCorner 50
        Shadowing 3
        :depth(3) {
            LineThickness 10
        }
    }
    .transaction {
        LineColor #orange
        'LineStyle 7
        '#line.dashed 
    }
    .done {
        LineColor $existing_link()
        LineThickness 6
        'LineStyle 6
    }
    .temporary {
        LineColor #red
        LineThickness 3
        'LineStyle 6
    }
    .new {
        BackGroundColor $new()
    }
    .change {
        BackGroundColor $change()
    }
    .existing {
        BackGroundColor $existing()
    }
    .remove {
        BackGroundColor $remove()
    }
    .alt {
        BackGroundColor $alt()
    }
    .notouch {
        BackGroundColor $notouch()
    }

    .next-phase{
        BorderThickness 0.5
        BackGroundColor #white|$new()
        LineStyle 70
        DiagonalCorner 20 
    }
arrow {
    .new {
        LineColor $new_link()
    }
    .change {
        LineColor $change_link()
    }
    .existing {
        LineColor $existing_link()
    }
    .remove {
        LineColor $remove_link()
    }
    .alt {
        LineColor $alt_link()
    }
    .notouch {
        LineColor $notouch_link()
    }
    .transaction {
        LineColor #orange
        LineStyle 1
        LineThickness 3
    }

}
</style>

!function $strReplace($str,$find,$replace)
    !$len = %strlen($str)
    !$res = ""
    !while $len >= 0
        !$chr = %substr($str,$len,1)
        !if $chr == $find
            !$res = $replace + $res
        !else
            !$res = $chr + $res
        !endif
        !$len = $len - 1
    !endwhile
    !return $res
!endfunction

!procedure $ShowJson($json,$text='=json')
    label l [
        $text
        $json
        {{json
        $json
        }}
    ]
!endprocedure

!function $CountPart($str,$separator=$defaultPartSeparator)
    !$res = $str
    !$pos = 1
    !$count = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$count = $count + 1
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile
    !return $count
!endfunction
!procedure $CountPart_Test()
    !$count = $CountPart(Part1__Part2__Part3,$defaultPartSeparator) 
    node CountPart_Test $example
    note right
        $count
    endnote
!endprocedure
'$CountPart_Test()

!function $LastPart($str,$separator=$defaultPartSeparator)
    !$res = $str
    !$pos = 1
    !while ($pos > 0)
        !$pos = %strpos($res,$separator)
        !if ($pos > 0)
            !$res = %substr($res,$pos + %strlen($separator) )
        !endif
    !endwhile 
'    !$parts = %splitstr($str,$separator) ' Splits by char not by string so is not whats required
'    !foreach $item in $parts
'        !$res = $item
'    !endfor 
    !return $res
!endfunction
!procedure $LastPart_Test() 
    node LastPart_Test $example
    note right
        $LastPart(Part1__Part2__Part3,'__')
    endnote
!endprocedure
'$LastPart_Test()

!function $highlight($str,$start='{',$end='}',$color='red')
    !$res = $strReplace($str,$start,"<color:red>")
    !$res = $strReplace($res,$end,"</color>")
    !return $res
!endfunction
'node aaa as "$highlight('dd{d}d')"

!unquoted function $label($str,$type = '',$sizeArg = 0)
    !$sizeArg = %intval($sizeArg)
    !$size = ( $sizeArg * $scaleTextUp / $scaleTextDown  )
    !$res = $str
    !$stereotype = ''
    !$actionColor = ''
    !if ($type!='')
        !$actionParts = %splitstr($type,";") 
        !foreach $item in $actionParts
            !if (%substr($item,0,1) != "#" )
                !$stereotype = $stereotype + '<<' + $item + '>>'
            !else
                !$actionColor = $item 
            !endif
        !endfor 
        !if ($stereotype!='')
            !$res = $res + ' ' + $stereotype
        !endif
    !endif

    !if ($size > 0)
        !$sizeStart = '<size:' + $size + '>'
        !$sizeEnd = '</size>'
    !else
        !$sizeStart = ''
        !$sizeEnd = ''
    !endif

    !$name = $LastPart($str)
    !$name = $strReplace($name,$defaultWordSeparator,' ')
    !$entityLevel = $CountPart($str)

    !$res = $res + ' as "' + $sizeStart + $name + $sizeEnd + '"'

'    !if (%strlen($actionColor) > 0)
'        !$actionColor = %darken($action , ($entityLevel - 2) * 10)
'        !$res = $res + " " + $actionColor + " "
'    !endif

    !return $res
!endfunction

!procedure $label_Test() 
    rectangle label_Test [
        == label_Test
        ---
            No Size
            $label(Any_Service,service;new)
        ---
            Size = 30
            $label(Any_Service,service;new, 30)
        ---
            $label(Any_Service,service;new;change)
    ]
!endprocedure
' $label_Test()


!unquoted procedure $scale($type, $name, $action = '', $factor = 4)
    !$scale2 = $factor * $scaleText
    label $name [
    {{
        scale $scale2
        $type $label($name,$action,10)
    }}
    ]
!endprocedure
!procedure $scale_Test() 
    $scale(actor/,ACTOR_T,'')
!endprocedure
 $scale_Test()

!unquoted function $service($name = 'anyService', $action = '')
    !return "frame " + $label($name,"service;" + $action,50) 
!endfunction

!unquoted function $environment($name = 'anyEnvironment', $action = '')
    !return "rectangle " + $label($name, "environment;" + $action ,30)
!endfunction

!unquoted function $external($name = 'anyEnvironment', $action = '')
    !return "cloud " + $label($name,"environment;$action",30)
!endfunction

!unquoted function $transaction($name, $action = '') {
    !return "hexagon " + $label($name,'transaction;' + $action)
!endfunction

!unquoted procedure $tag($text='',$desc='', $tagcolor='#black')
    note on link $tagcolor|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $black_tag($text='',$desc='')
    note on link #black|lightgray
        <&cog><color:#black>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $legend($text='',$desc='')
legend
<back:#black><color:#white>Text Tag</color></back> | <back:$new()>New</back> |<back:$existing()>Existing</back> |<back:$change()>Change</back> | <back:$remove()>Remove</back> |  <back:$notouch()>Existing no touch</back> | <back:$alt()>Alternative</back>
<size:8> Plantuml %version() | %date("yyyy-MMM-dd") %filename()</size>
end legend
!endprocedure

!endsub

!unquoted procedure $example_style($text='')
    left to right direction

    together example_style $example {
        together {
            component anyComponent
            component new <<new>>
            component existing <<existing>> 
            component remove <<remove>>
            component temporary<<new>><<temporary>> 
            component notouch <<notouch>> 
            component done<<done>> 
            component change <<change>>
            component alternative <<alt>>

            new ..|> anyComponent : Realization 
            usecase anyUseCase as "use case"
            actor anyActor as "user/system" 
            actor stakeholder  
            stakeholder --|> anyActor : is as
            stakeholder -- anyUseCase

            existing --> remove <<remove>> : "<<remove>>"
            existing --> notouch <<notouch>> : "<<notouch>>"
            existing --> change <<change>> : "<<change>>" 
            change --> done <<change>>
                $black_tag(change_link)
            new --> done <<new>>
                $black_tag(new_link)
            done --> existing <<existing>>

            new --|> anyUseCase : Implements

            rectangle "In the scope of another workstream" <<next-phase>> {
                component remove_future <<remove>>
                component change_future <<change>>

                existing --> remove_future <<existing>>
                    $black_tag(existing_link)
                
                existing --> change_future

                new --> temporary
                temporary --> remove_future : $out_of_scope()
                new --> alternative <<alt>>
                    $tag(alt_link)
            }
        }

    $service(Any_Service_Group, existing){
        $service(Any_Service, new) {
            $environment(Any_Service__Any_Environment, new) {

                database anyDatabase as "Queryable\nstorage"
                file anyFile as "File\nstorage"
                node process {
                    entity anyEntity as "Aggregate / Entity"
                    control anyControl as "Control / Controller"
                    boundary anyBoundary as "Boundary"
                    anyControl -l-> anyEntity
                    anyBoundary -l-> anyControl
                    anyActor --> anyBoundary
                }

                anyControl --> anyDatabase : POST/PUT/PATCH
                anyDatabase --> anyControl : GET
                anyControl --> anyFile : Save
                anyFile --> anyControl : Retrieve

                queue Topic_outbound <<outbound>> as "topic"
                queue Topic_inbound <<inbound>> as "topic"

                anyControl --\\ Topic_outbound : PUSH
                Topic_inbound --\\ anyControl : PULL

                interface ApiGateway as "ApiGateway Proxy"
                ApiGateway -d- anyBoundary

            }
        }
    } 
}

frame Transaction_Diagram_convention $example {

    database Transaction_resource_A 

    $transaction(Any_TransactionScope) {
        control $label(Control_With_TransactionScope)
    }

    database Transaction_resource_B
    File No_Transaction_resource_C

    Transaction_resource_A *--> Control_With_TransactionScope <<transaction>> : read
        note on link
            **In transaction** 
            Use Composition Arrow 
            <color:red>*--></color>
        endnote
    Control_With_TransactionScope *--> Transaction_resource_B <<transaction>> : write
        note on link
            In transaction 
        endnote
    Control_With_TransactionScope --> No_Transaction_resource_C : write
        note on link
            **NOT in transaction** 
        endnote
}

!endprocedure

!unquoted procedure $flow_vs_dependency()

frame flow_vs_dependency as "flow vs dependency" $example {
    
    control publisher_topic 

    queue topic
    control consumer_topic

    publisher_topic --> topic : Publish
    topic --> consumer_topic : Consume

    control persister_storage 
    database storage
    control querier_storage

    persister_storage --\\ storage : Store
    storage --> querier_storage : Query
}

!endprocedure

$example_style()
$flow_vs_dependency()
$legend()
'remove @unlinked
@enduml


