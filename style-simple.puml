@startuml style
'https://crashedmind.github.io/PlantUMLHitchhikersGuide/layout/layout.html
'allow_mixing
'skinparam monochrome true
'skinparam linetype polyline
'skinparam linetype ortho

!include <azure/AzureCommon>
!include <azure/Databases/AzureCosmosDb>
!include <azure/Databases/AzureSqlDatabase>
!include <cloudinsight/kafka>

!startsub BASIC

skinparam ActorBackgroundColor #white
skinparam ComponentBackgroundColor #white
skinparam UseCaseBackgroundColor #white
skinparam ArrowThickness 3
skinparam ArrowLollipopColor #blue
skinparam ArrowColor grey
skinparam legendBackgroundColor #white
skinparam NoteBorderThickness 1.5
skinparam QueueBackgroundColor #white
skinparam BoundaryBackgroundColor #white
skinparam ControlBackgroundColor #white
skinparam EntityBackgroundColor #white
skinparam InterfaceBackgroundColor #white
skinparam DatabaseBackgroundColor #white

skinparam Component<<next-phase>> {
    BorderColor #blue
}

skinparam Nodesep 30
skinparam Ranksep 10

skinparam rectangle {
    RoundCorner 25
}

skinparam frame<<environment>> {
    RoundCorner 50
}

!function $remark($text,$color=red)
    !return "<color:" + $color+ ">" + $text + "</color>"  
!endfunction

!function $out_of_scope()
    !return $remark(out-of-scope)
!endfunction

!function $done($type = "any")
    !return "#CornflowerBlue"
!endfunction

!function $notouch($type = "any")
    !return "#lightgray"
!endfunction

!function $notouch_link($type = "any")
    !return "#gray"
!endfunction

!function $exiting($type = "any")
    !return "#lightgreen"
!endfunction

!function $existing($type = "any")
    !return "#lightgreen"  
!endfunction

!function $existing_link($type = "any")
    !return "#green"  
!endfunction

!function $new($type = "any")
    !return "#powderBlue"  
!endfunction

!function $new_link($type = "any")
    !return "#blue"  
!endfunction

!function $change($type = "any")
    !return "#lightyellow"  
!endfunction

!function $change_link($type = "any")
    !return "#burlywood"  
!endfunction


!function $remove($type = "any")
    !return "#pink"  
!endfunction

!function $remove_link($type = "any")
    !return "#red"  
!endfunction

!function $alt($type = "any")
    !return "#orchid"  
!endfunction

!function $alt_link($type = "any")
    !return "#purple"  
!endfunction


!function $temporary($type = "any")
    !return "#powderBlue|pink" 
!endfunction

!function $remove_future($type = "any")
    !return "#lightgreen|pink"  
!endfunction

!function $change_future($type = "any")
    !return "#lightgreen|yellow"  
!endfunction

!function $service($name = 'anyService')
    !return "frame " + $name
!endfunction

!unquoted procedure $tag($text='',$desc='')
    note on link #black|lightgray
        <&cog><color:#white>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $black_tag($text='',$desc='')
    note on link #black|lightgray
        <&cog><color:#white>$text</color><back:#white><color:#black>$desc</color></back>
    endnote
!endprocedure

!unquoted procedure $legend($text='',$desc='')
legend
<back:#black><color:#white>Text Tag</color></back> | <back:$new()>New</back> |<back:$existing()>Existing</back> |<back:$change()>Change</back> | <back:$remove()>Remove</back> |  <back:$notouch()>Existing no touch</back> | <back:$alt()>Alternative</back>
<size:8> Plantuml %version() | %date("yyyy-MMM-dd") %filename()</size>
end legend
!endprocedure

!endsub

!unquoted procedure $example_style($text='')
    left to right direction

    component anyComponent
    component new $new() 
    component existing $existing() 
    component remove $remove()
    component temporary<<temporary>> $new() 
        '$temporary() 
    component notouch $notouch() 
    component done $done()
    component change $change()
    component alternative $alt()

    new ..|> anyComponent : Realization 

    usecase anyUseCase as "use case"
    
    'together {
    actor anyActor as "user/system" 
    actor stakeholder 
    stakeholder --|> anyActor : is as
    stakeholder -- anyUseCase
    '}

    existing -[$remove_link()]-> remove
        $black_tag(remove_link)

    notouch -[$notouch_link()]-> existing
        $black_tag(no_change_link)

    existing --> change
    change -[$change_link()]-> done
        $black_tag(change_link)
    new -[$new_link()]-> done
        $black_tag(new_link)
    done --> existing 

    new -u-|> anyUseCase : Implements

rectangle "In the scope of another workstream" #line.dashed {
    component remove_future<<next-phase>> $remove()
        ' $remove_future() 
    component change_future<<next-phase>> $change()
        ' $change_future()

    existing -[$existing_link()]-> remove_future
        $black_tag(existing_link)
    
    existing --> change_future

    new --> temporary
    temporary --> remove_future : $out_of_scope()
    new -[$alt_link()]-> alternative
        $tag(alt_link)
}

rectangle Environment <<environment>> {

    $service(AnyService) as "Service Boundary" {
        node process {
            boundary anyBoundary as "Boundary"
            control anyControl as "Control / Controller"
            entity anyEntity as "Aggregate / Entity"
        }
        database anyStorage as "Durable storage"

        anyBoundary -r-> anyControl
        anyControl -r-> anyEntity 
        anyActor --> anyBoundary
        anyControl --> anyStorage : POST/PUT/GET/PATCH\nentity

        queue Topic_outbound <<outbound>> as "topic"

        queue Topic_inbound <<inbound>> as "topic"

        anyControl --\\ Topic_outbound : PUSH
        Topic_inbound --\\ anyControl : PULL
    }
}

!endprocedure

'$example_style()
'$legend()

@enduml


